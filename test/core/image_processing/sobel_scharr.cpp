//
// Copyright 2019 Olzhas Zhumabek <anonymous.from.applecity@gmail.com>
//
// Use, modification and distribution are subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/gil/detail/math.hpp>
#include <boost/gil/image_processing/numeric.hpp>

#include <boost/core/lightweight_test.hpp>

#include <algorithm>

#include "test_utility_output_stream.hpp"

namespace gil = boost::gil;

std::vector<float> dy_sobel_2_15 {
    1.00000e+00,  1.40000e+01,  9.10000e+01,  3.64000e+02,  1.00100e+03,
    2.00200e+03,  3.00300e+03,  3.43200e+03,  3.00300e+03,  2.00200e+03,
    1.00100e+03,  3.64000e+02,  9.10000e+01,  1.40000e+01,  1.00000e+00,
    1.00000e+01,  1.40000e+02,  9.10000e+02,  3.64000e+03,  1.00100e+04,
    2.00200e+04,  3.00300e+04,  3.43200e+04,  3.00300e+04,  2.00200e+04,
    1.00100e+04,  3.64000e+03,  9.10000e+02,  1.40000e+02,  1.00000e+01,
    4.30000e+01,  6.02000e+02,  3.91300e+03,  1.56520e+04,  4.30430e+04,
    8.60860e+04,  1.29129e+05,  1.47576e+05,  1.29129e+05,  8.60860e+04,
    4.30430e+04,  1.56520e+04,  3.91300e+03,  6.02000e+02,  4.30000e+01,
    1.00000e+02,  1.40000e+03,  9.10000e+03,  3.64000e+04,  1.00100e+05,
    2.00200e+05,  3.00300e+05,  3.43200e+05,  3.00300e+05,  2.00200e+05,
    1.00100e+05,  3.64000e+04,  9.10000e+03,  1.40000e+03,  1.00000e+02,
    1.21000e+02,  1.69400e+03,  1.10110e+04,  4.40440e+04,  1.21121e+05,
    2.42242e+05,  3.63363e+05,  4.15272e+05,  3.63363e+05,  2.42242e+05,
    1.21121e+05,  4.40440e+04,  1.10110e+04,  1.69400e+03,  1.21000e+02,
    2.20000e+01,  3.08000e+02,  2.00200e+03,  8.00800e+03,  2.20220e+04,
    4.40440e+04,  6.60660e+04,  7.55040e+04,  6.60660e+04,  4.40440e+04,
    2.20220e+04,  8.00800e+03,  2.00200e+03,  3.08000e+02,  2.20000e+01,
   -1.65000e+02, -2.31000e+03, -1.50150e+04, -6.00600e+04, -1.65165e+05,
   -3.30330e+05, -4.95495e+05, -5.66280e+05, -4.95495e+05, -3.30330e+05,
   -1.65165e+05, -6.00600e+04, -1.50150e+04, -2.31000e+03, -1.65000e+02,
   -2.64000e+02, -3.69600e+03, -2.40240e+04, -9.60960e+04, -2.64264e+05,
   -5.28528e+05, -7.92792e+05, -9.06048e+05, -7.92792e+05, -5.28528e+05,
   -2.64264e+05, -9.60960e+04, -2.40240e+04, -3.69600e+03, -2.64000e+02,
   -1.65000e+02, -2.31000e+03, -1.50150e+04, -6.00600e+04, -1.65165e+05,
   -3.30330e+05, -4.95495e+05, -5.66280e+05, -4.95495e+05, -3.30330e+05,
   -1.65165e+05, -6.00600e+04, -1.50150e+04, -2.31000e+03, -1.65000e+02,
    2.20000e+01,  3.08000e+02,  2.00200e+03,  8.00800e+03,  2.20220e+04,
    4.40440e+04,  6.60660e+04,  7.55040e+04,  6.60660e+04,  4.40440e+04,
    2.20220e+04,  8.00800e+03,  2.00200e+03,  3.08000e+02,  2.20000e+01,
    1.21000e+02,  1.69400e+03,  1.10110e+04,  4.40440e+04,  1.21121e+05,
    2.42242e+05,  3.63363e+05,  4.15272e+05,  3.63363e+05,  2.42242e+05,
    1.21121e+05,  4.40440e+04,  1.10110e+04,  1.69400e+03,  1.21000e+02,
    1.00000e+02,  1.40000e+03,  9.10000e+03,  3.64000e+04,  1.00100e+05,
    2.00200e+05,  3.00300e+05,  3.43200e+05,  3.00300e+05,  2.00200e+05,
    1.00100e+05,  3.64000e+04,  9.10000e+03,  1.40000e+03,  1.00000e+02,
    4.30000e+01,  6.02000e+02,  3.91300e+03,  1.56520e+04,  4.30430e+04,
    8.60860e+04,  1.29129e+05,  1.47576e+05,  1.29129e+05,  8.60860e+04,
    4.30430e+04,  1.56520e+04,  3.91300e+03,  6.02000e+02,  4.30000e+01,
    1.00000e+01,  1.40000e+02,  9.10000e+02,  3.64000e+03,  1.00100e+04,
    2.00200e+04,  3.00300e+04,  3.43200e+04,  3.00300e+04,  2.00200e+04,
    1.00100e+04,  3.64000e+03,  9.10000e+02,  1.40000e+02,  1.00000e+01,
    1.00000e+00,  1.40000e+01,  9.10000e+01,  3.64000e+02,  1.00100e+03,
    2.00200e+03,  3.00300e+03,  3.43200e+03,  3.00300e+03,  2.00200e+03,
    1.00100e+03,  3.64000e+02,  9.10000e+01,  1.40000e+01,  1.00000e+00,
};

std::vector<float> dy_sobel_3_15 {
   -1.00000e+00, -1.40000e+01, -9.10000e+01, -3.64000e+02, -1.00100e+03,
   -2.00200e+03, -3.00300e+03, -3.43200e+03, -3.00300e+03, -2.00200e+03,
   -1.00100e+03, -3.64000e+02, -9.10000e+01, -1.40000e+01, -1.00000e+00,
   -8.00000e+00, -1.12000e+02, -7.28000e+02, -2.91200e+03, -8.00800e+03,
   -1.60160e+04, -2.40240e+04, -2.74560e+04, -2.40240e+04, -1.60160e+04,
   -8.00800e+03, -2.91200e+03, -7.28000e+02, -1.12000e+02, -8.00000e+00,
   -2.50000e+01, -3.50000e+02, -2.27500e+03, -9.10000e+03, -2.50250e+04,
   -5.00500e+04, -7.50750e+04, -8.58000e+04, -7.50750e+04, -5.00500e+04,
   -2.50250e+04, -9.10000e+03, -2.27500e+03, -3.50000e+02, -2.50000e+01,
   -3.20000e+01, -4.48000e+02, -2.91200e+03, -1.16480e+04, -3.20320e+04,
   -6.40640e+04, -9.60960e+04, -1.09824e+05, -9.60960e+04, -6.40640e+04,
   -3.20320e+04, -1.16480e+04, -2.91200e+03, -4.48000e+02, -3.20000e+01,
    1.10000e+01,  1.54000e+02,  1.00100e+03,  4.00400e+03,  1.10110e+04,
    2.20220e+04,  3.30330e+04,  3.77520e+04,  3.30330e+04,  2.20220e+04,
    1.10110e+04,  4.00400e+03,  1.00100e+03,  1.54000e+02,  1.10000e+01,
    8.80000e+01,  1.23200e+03,  8.00800e+03,  3.20320e+04,  8.80880e+04,
    1.76176e+05,  2.64264e+05,  3.02016e+05,  2.64264e+05,  1.76176e+05,
    8.80880e+04,  3.20320e+04,  8.00800e+03,  1.23200e+03,  8.80000e+01,
    9.90000e+01,  1.38600e+03,  9.00900e+03,  3.60360e+04,  9.90990e+04,
    1.98198e+05,  2.97297e+05,  3.39768e+05,  2.97297e+05,  1.98198e+05,
    9.90990e+04,  3.60360e+04,  9.00900e+03,  1.38600e+03,  9.90000e+01,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
   -9.90000e+01, -1.38600e+03, -9.00900e+03, -3.60360e+04, -9.90990e+04,
   -1.98198e+05, -2.97297e+05, -3.39768e+05, -2.97297e+05, -1.98198e+05,
   -9.90990e+04, -3.60360e+04, -9.00900e+03, -1.38600e+03, -9.90000e+01,
   -8.80000e+01, -1.23200e+03, -8.00800e+03, -3.20320e+04, -8.80880e+04,
   -1.76176e+05, -2.64264e+05, -3.02016e+05, -2.64264e+05, -1.76176e+05,
   -8.80880e+04, -3.20320e+04, -8.00800e+03, -1.23200e+03, -8.80000e+01,
   -1.10000e+01, -1.54000e+02, -1.00100e+03, -4.00400e+03, -1.10110e+04,
   -2.20220e+04, -3.30330e+04, -3.77520e+04, -3.30330e+04, -2.20220e+04,
   -1.10110e+04, -4.00400e+03, -1.00100e+03, -1.54000e+02, -1.10000e+01,
    3.20000e+01,  4.48000e+02,  2.91200e+03,  1.16480e+04,  3.20320e+04,
    6.40640e+04,  9.60960e+04,  1.09824e+05,  9.60960e+04,  6.40640e+04,
    3.20320e+04,  1.16480e+04,  2.91200e+03,  4.48000e+02,  3.20000e+01,
    2.50000e+01,  3.50000e+02,  2.27500e+03,  9.10000e+03,  2.50250e+04,
    5.00500e+04,  7.50750e+04,  8.58000e+04,  7.50750e+04,  5.00500e+04,
    2.50250e+04,  9.10000e+03,  2.27500e+03,  3.50000e+02,  2.50000e+01,
    8.00000e+00,  1.12000e+02,  7.28000e+02,  2.91200e+03,  8.00800e+03,
    1.60160e+04,  2.40240e+04,  2.74560e+04,  2.40240e+04,  1.60160e+04,
    8.00800e+03,  2.91200e+03,  7.28000e+02,  1.12000e+02,  8.00000e+00,
    1.00000e+00,  1.40000e+01,  9.10000e+01,  3.64000e+02,  1.00100e+03,
    2.00200e+03,  3.00300e+03,  3.43200e+03,  3.00300e+03,  2.00200e+03,
    1.00100e+03,  3.64000e+02,  9.10000e+01,  1.40000e+01,  1.00000e+00
};

void test_dx_sobel_kernel()
{
    auto const kernel = gil::generate_sobel_kernel({1, 0});
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dx_sobel.begin(),
        gil::detail::dx_sobel.end());
}

void test_dx_scharr_kernel()
{
    auto const kernel = gil::generate_dx_scharr(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dx_scharr.begin(),
        gil::detail::dx_scharr.end());
}

void test_dy_sobel_kernel()
{
    auto const kernel = gil::generate_sobel_kernel({0, 1});
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dy_sobel.begin(),
        gil::detail::dy_sobel.end());

    auto const kernel_y_2_15 = gil::generate_sobel_kernel({0, 2}, 15);
    BOOST_TEST_ALL_EQ(kernel_y_2_15.begin(), kernel_y_2_15.end(),
        dy_sobel_2_15.begin(), dy_sobel_2_15.end());

    auto const kernel_y_3_15 = gil::generate_sobel_kernel({0, 3}, 15);
    BOOST_TEST_ALL_EQ(kernel_y_3_15.begin(), kernel_y_3_15.end(),
        dy_sobel_3_15.begin(), dy_sobel_3_15.end());
}

void test_dy_scharr_kernel()
{
    auto const kernel = gil::generate_dy_scharr(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dy_scharr.begin(),
        gil::detail::dy_scharr.end());
}

int main()
{
    test_dx_sobel_kernel();
    test_dx_scharr_kernel();
    test_dy_sobel_kernel();
    test_dy_scharr_kernel();

    // auto ans = gil::generate_sobel_kernel({0, 2}, 13);
    
    // for (int i = 0; i < 13; ++i)
    // {
    //     for (int j = 0; j < 13; ++j)
    //     {
    //         std::cout << ans[13 * i + j] << " ";
    //     }
    //     std::cout << "\n";
    // }
    
    return boost::report_errors();
}
